//{ Driver Code Starts
class Node {
    constructor(data) {
        this.data = data;
        this.next = null;
    }
}

function printList(head) {
    let temp = head;
    const result = [];
    while (temp !== null) {
        result.push(temp.data);
        temp = temp.next;
    }
    console.log(result.join(' '));
    console.log("~");
}

function createLinkedList(arr) {
    let head = null, tail = null;
    arr.forEach(value => {
        if (!isNaN(value)) {
            let newNode = new Node(value);
            if (head === null) {
                head = newNode;
                tail = newNode;
            } else {
                tail.next = newNode;
                tail = newNode;
            }
        }
    });
    return head;
}

// Driver code using readline for input/output
const readline = require('readline');
const rl = readline.createInterface({input : process.stdin, output : process.stdout});

let input = [];
rl.on('line', (line) => { input.push(line); });

rl.on('close', () => {
    let T = parseInt(input[0]);
    let index = 1;

    while (T--) {
        let arr1 = input[index].split(' ').map(Number);
        index++;
        let arr2 = input[index].split(' ').map(Number);
        index++;

        let head1 = createLinkedList(arr1);
        let head2 = createLinkedList(arr2);

        let obj = new Solution();
        let mergedList = obj.sortedMerge(head1, head2);
        printList(mergedList);
    }
});
// } Driver Code Ends


// User function Template for javascript
/**
 * @param {Node} head1
 * @param {Node} head2
 * @returns {Node}
 */

/*
class Node{
    constructor(data){
        this.data = data;
        this.next = null;
    }
}
*/
 const mergenodes = (node1, node2) => {
    
     let startnode = node1?.data < node2.data ? node1 : node2;
     let cur;
     let temp1 = node1;
     let temp2 = node2;
    while (temp1 && temp2) {
        if (temp1.data < temp2.data) {
            if (!cur) cur = temp1;
            else {
                cur.next = temp1;
                 cur = temp1;
            }
            temp1 = temp1.next
          
        } else {
            if (!cur) cur = temp2;
            else {
                cur.next = temp2;
                cur = temp2;
            }
            temp2 = temp2.next;
        }
       
    }
    
    while (temp1) {
        if (!cur) cur = temp1;
        else cur.next = temp1;
        cur = cur.next;
        temp1 = temp1.next
    }
    
    while (temp2) {
        if (!cur) cur = temp2;
        else cur.next = temp2;
        cur = cur.next;
        temp2 = temp2.next;
    }
    return startnode;
 }
class Solution {
    sortedMerge(head1, head2) {
        // your code here
        return mergenodes(head1, head2);
    }
}
